import streamlit as st
import requests
import json
import io

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="AI Presentation Generator",
    page_icon="üìä",
    layout="wide"
)

# URL c·ªßa FastAPI backend
FASTAPI_URL = "http://localhost:8002"

def main():
    st.title("üìä AI Presentation Generator")
    st.markdown("Nh·∫≠p ch·ªß ƒë·ªÅ v√† t·∫£i l√™n t√†i li·ªáu (t√πy ch·ªçn) ƒë·ªÉ t·∫°o d√†n √Ω cho b√†i tr√¨nh b√†y c·ªßa b·∫°n.")

    # Kh·ªüi t·∫°o session state
    if "outline" not in st.session_state:
        st.session_state.outline = None
    if "pptx_file" not in st.session_state:
        st.session_state.pptx_file = None

    with st.sidebar:
        st.header("‚öôÔ∏è T√πy ch·ªçn")
        topic = st.text_input("Ch·ªß ƒë·ªÅ b√†i tr√¨nh b√†y:", placeholder="VD: L·ªãch s·ª≠ tr√≠ tu·ªá nh√¢n t·∫°o")
        uploaded_file = st.file_uploader("T·∫£i l√™n t√†i li·ªáu PDF (t√πy ch·ªçn)", type="pdf")

        if st.button("üìù T·∫°o d√†n √Ω", type="primary", disabled=not topic):
            with st.spinner("ƒêang ph√¢n t√≠ch v√† t√¨m ki·∫øm th√¥ng tin ƒë·ªÉ t·∫°o d√†n √Ω..."):
                files = {'file': (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)} if uploaded_file else None
                data = {'topic': topic}
                
                try:
                    response = requests.post(f"{FASTAPI_URL}/generate-outline", data=data, files=files)
                    response.raise_for_status()
                    outline_data = response.json()
                    # The actual outline can be a list or a dict with a 'slides' or 'outline' key
                    if isinstance(outline_data, dict) and "slides" in outline_data:
                        st.session_state.outline = outline_data["slides"]
                    elif isinstance(outline_data, dict) and "outline" in outline_data:
                        st.session_state.outline = outline_data["outline"]
                    else: # If the root is the list
                        st.session_state.outline = outline_data
                    st.session_state.pptx_file = None # Reset pptx file
                    st.success("T·∫°o d√†n √Ω th√†nh c√¥ng!")
                except requests.exceptions.RequestException as e:
                    st.error(f"L·ªói k·∫øt n·ªëi: {e}")
                except json.JSONDecodeError:
                    st.error("L·ªói: Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ server. Ph·∫£n h·ªìi kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")
                    st.error(f"N·ªôi dung ph·∫£n h·ªìi: {response.text}")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

    st.markdown("---")

    if st.session_state.outline:
        st.subheader("D√†n √Ω ƒë·ªÅ xu·∫•t (c√≥ th·ªÉ ch·ªânh s·ª≠a)")
        
        # Allow editing the outline
        for i, slide in enumerate(st.session_state.outline):
            with st.expander(f"Slide {i+1}: {slide.get('title', '')}", expanded=True):
                slide['title'] = st.text_input("Ti√™u ƒë·ªÅ Slide", value=slide.get('title', ''), key=f"title_{i}")
                slide['points'] = st.text_area("N·ªôi dung (m·ªói d√≤ng m·ªôt g·∫°ch ƒë·∫ßu d√≤ng)", 
                                               value="\n".join(slide.get('points', [])), 
                                               key=f"points_{i}").split("\n")
                slide['image_suggestion'] = st.text_input("G·ª£i √Ω h√¨nh ·∫£nh", value=slide.get('image_suggestion', ''), key=f"img_{i}")

        if st.button("üöÄ T·∫°o b√†i tr√¨nh b√†y", type="primary"):
            with st.spinner("ƒêang t·∫°o file PowerPoint... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t."):
                try:
                    payload = {"outline": st.session_state.outline}
                    response = requests.post(f"{FASTAPI_URL}/generate-presentation", json=payload)
                    response.raise_for_status()
                    
                    # Save the pptx file to session state
                    st.session_state.pptx_file = io.BytesIO(response.content)
                    st.success("T·∫°o b√†i tr√¨nh b√†y th√†nh c√¥ng!")

                except requests.exceptions.RequestException as e:
                    st.error(f"L·ªói k·∫øt n·ªëi khi t·∫°o b√†i tr√¨nh b√†y: {e}")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi t·∫°o b√†i tr√¨nh b√†y: {e}")

    if st.session_state.pptx_file:
        st.markdown("---")
        st.subheader("T·∫£i xu·ªëng b√†i tr√¨nh b√†y c·ªßa b·∫°n")
        st.download_button(
            label="üì• T·∫£i xu·ªëng file .pptx",
            data=st.session_state.pptx_file,
            file_name="presentation.pptx",
            mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
        )

if __name__ == "__main__":
    main()
